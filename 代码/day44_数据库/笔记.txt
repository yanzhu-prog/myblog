1. pip install sqlalchemy
  映射

  model  ----》 表
  属性   ----》 字段
  对象   ----》 一行数据

  db = SQLAlchemy(app)

   常用的过滤器：
        filter()    把过滤器添加到原查询上，返回一个新查询
        filter_by() 把等值过滤器添加到原查询上，返回一个新查询
        limit()     使用指定的值限定原查询返回的结果
        offset()    偏移原查询返回的结果，返回一个新查询
        order_by()  根据指定条件对原查询结果进行排序，返回一个新查询
        group_by()  根据指定条件对原查询结果进行分组，返回一个新查询


        执行器的使用
        all()           以列表形式返回查询的所有结果
        first()         返回查询的第一个结果，如果未查到，返回None
        first_or_404()  返回查询的第一个结果，如果未查到，返回404
        get()           返回指定主键对应的行，如不存在，返回None
        get_or_404()    返回指定主键对应的行，如不存在，返回404
        count()         返回查询结果的数量
        paginate()      返回一个Paginate对象，它包含指定范围内的结果


常用的字段
    类型名                   python类型              说明
    Integer                     int                  普通整数，一般是32位
    SmallInteger                int                  取值范围小的整数，一般是16位
    BigInteger                  int或long            不限制精度的整数
    Float                       float                浮点数
    Numeric                     decimal.Decimal      普通整数，一般是32位
    String                      str                  变长字符串
    Text                        str                  变长字符串，对较长或不限长度的字符串做了优化
    Unicode                     unicode              变长Unicode字符串
    UnicodeText                 unicode              变长Unicode字符串，对较长或不限长度的字符串做了优化
    Boolean                     bool                 布尔值
    Date                        datetime.date        时间
    Time                        datetime.datetime    日期和时间
    LargeBinary                 str                  二进制文件
    Enum                        enum                 枚举类型
常用列选项
    primary_key         如果为True，代表表的主键
    unique              如果为True，代表这列不允许出现重复的值
    index               如果为True，为这列创建索引，提高查询效率
    nullable            如果为True，允许有空值，如果为False，不允许有空值
    default             为这列定义默认值,如default=1
常用的关系选项
    backref             在关系的另一模型中添加反向引用,用于找到父表
    primary join        明确指定两个模型之间使用的联结条件
    uselist             如果为False，不使用列表，而使用标量值
    order_by            指定关系中记录的排序方式
    secondary           指定多对多中记录的排序方式
    secondary join      在SQLAlchemy中无法自行决定时，指定多对多关系中的二级联结条件



  class User(db.Model):
        id = db.Column(db.Integer,primary_key=True,..)
        ....



  db.create_all()  ---> 创建表

  操作：
    添加：
       创建模型对象
       u = User()
       u.username=username
       u.password= password
       ...

       db.session.add(u)
       db.session.commit()

    删除:
      找对象 ---》 要删除的对象
      user= User.query.get(id)

      db.session.delete(user)
      db.session.commit()

     逻辑删除:(更新)
      找对象 ---》 要删除的对象
      user= User.query.get(id)

      user.isdelete= True
      db.session.commit()

   查询:
      User.query.all()
      User.query.get(id)

      User.query.filter_by(username='admin')
      User.query.filter()

      User.query.count()
      User.query.filter(User.isdelete==False).order_by(-User.rdatetime)

pip install flask-script
manager = Manager(app)

manager.run()   ----->runserver


pip install flask-migrate

migrate = Migrate(app=app,db=db)   ----> db= SQLAlchemy()  ---->  create_app()： db.init_app(app)
manager.add_command('db',MigrateCommand)


python manage.py db init
python manage.py db migrate  ---> 版本文件 xxx.py
python manage.py db upgrade | downgrade



关系：
1对多:

1: user
多: article

建立数据库之间的引用关系:
class User(db.Model):
    __tablename__ ='user1'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)  主键

class Article(db.Model):
    ....
    # 建立两张表之间的关系
    user_id = db.Column(db.Integer, db.ForeignKey('表名.主键'), nullable=False)   是article的外键

代码的引用关系:
relationship  关系

在1：user上添加：
class User(db.Model):
    __tablename__ ='user1'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)  主键
    # 代码
    articles = db.relationship('Article', backref='user')

 正向: user对象.articles  --- > [<article>,<article>,...]

 反向: article对象.user ----> user对象      {{article.user.username}}


多对多:
步骤：
1. user  comment模型
2. 建立模型之间的关系：多对多之间的关系表
   方式1：
     class comment_user(db.Model):
         __tablename__='xxx'
         user_id
         comment_id

3. 建立relationship关系
    class User(db.Model):
        comments = db.relationship('Comment', backref='users',secondary='comment_user')
                                                                             |_ 就是关系表名

操作:

   添加：
       user对象

       user.comments.append(comment对象)  ----》
       db.session.commit()

         底层：
            1. 默认执行: db.session.add(comment对象)
            2. 默认执行: comment_user 添加记录


       class Student(db.Model):
             id =xxx
             sname=xxx
             age=xxx
             courses = db.relationship('Course',backref='students',secondary='student_course')


       class Course(db.Model):
             id = xxx
             cname=xxx
             score =5
            #students = db.relationship('Student',backref='courses',secondary='student_course')

       class student_course(db.Model):
            id= xxx
            stu_id = db.Column(db.Integer,db.ForeignKey('student.id'))
            cou_id = db.Column(db.Integer,db.ForeignKey('course.id'))


       id  stu_id  cou_id
       1    1       2
       2    1       5
       3    2       2
       4    5       3

       sid = 5  ---> 3  python

       student =Student.query.get(sid)
       course = Course.query.get(cid)

       1. student.courses.append(course)
       2. course.students.append(student)

   查询：
       student.courses    ----》 张三 选修了哪些课程
       course.students    ---->  选修python的有哪些学生

   删除：
       course 对象   ---》 python
       student.courses.remove(course对象)   ---》 自动删除关系表的记录


會話機制:
会话机制:
  http 协议  ---》 无状态协议
    设置cookie：
     通过response对象：
     response = make_response()
     response.set_cookie(key,value,max_age=(单位second),expires=(要求是detetime类型))

     expires = datetime(year=2018,month=11,day=5)
    #expires是这么设置的
    expires = datetime.now() + timedelta(days=13,hours=16)#这里一定要减8个小时
    #在新版本的http协议中，expires参数视为被废弃的
    #max_age,在IE8一下的浏览器是不支持的
    # res.set_cookie('username','zhiliao',expires=expires)#cookies只有在响应返回的时候才能设置,
    # max_age最大的cookies报存时间，expires到期时间


    删除cookie:
     通过response对象：
     response = make_response() | redirect()

     response.delete_cookie(key)

    获取cookie:
     后端：  request.cookies.get(key)  ----> cookie值
     前端:   {{ request.coookies['key']  }}


session :
  session是系统的全局对象

  from flask import session

  设置:

     session[key]=value

     开辟空间  ---》 session唯一标识   ----》 设置到cookie 中

      必须在settings.py 中添加:
      secret_key ='djfkljsdklf3747'

  获取:
     session.get('key') ---->value

  删除： session.clear()   ----> 空间+cookie都会删除
